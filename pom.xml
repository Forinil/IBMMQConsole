<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>net.sf.juffrou</groupId>
	<artifactId>mq-console</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>WebsphereMQ Console</name>
	<description>JavaFX 2 Application implementing a IBM WebsphereMQ broker console</description>
	<url>https://sourceforge.net/projects/mqconsole</url>
	
	<inceptionYear>2013</inceptionYear>
	<licenses>
		<license>
			<name>The Apache Software License, Version 2.0</name>
			<url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
			<distribution>repo</distribution>
			<comments>A business-friendly OSS license</comments>
		</license>
	</licenses>

	<developers>
		<developer>
			<name>Carlos Martins</name>
			<email>carlos.mfa.martins@gmail.com</email>
			<timezone>Europe/Lisbon</timezone>
		</developer>
	</developers>

	<scm>
		<connection>scm:git:ssh://cemartins@git.code.sf.net/p/mqconsole/code</connection>
		<developerConnection>scm:git:ssh://cemartins@git.code.sf.net/p/mqconsole/code</developerConnection>
		<url>http://sourceforge.net/p/mqconsole/code/ci/master/tree/</url>
	</scm>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<spring.version>3.1.4.RELEASE</spring.version>
		<log4j.version>1.2.17</log4j.version>
		<junit.version>4.10</junit.version>
		<websphere-MQ.version>7.0.1.9</websphere-MQ.version>
		<exec.mainClass>com.ibm.mq.pcf.ui.Main</exec.mainClass>
		<javafx.tools.ant.jar>${java.home}/../lib/ant-javafx.jar</javafx.tools.ant.jar>
	</properties>

	<build>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-shade-plugin</artifactId>
					<version>2.1</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>2.5.1</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-dependency-plugin</artifactId>
					<version>2.8</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-jar-plugin</artifactId>
					<version>2.4</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-antrun-plugin</artifactId>
					<version>1.7</version>
				</plugin>
				<plugin>
					<artifactId>maven-assembly-plugin</artifactId>
					<version>2.4</version>
				</plugin>
				<plugin>
					<groupId>com.zenjava</groupId>
					<artifactId>javafx-maven-plugin</artifactId>
					<version>2.0</version>
				</plugin>
			</plugins>
		</pluginManagement>
		<plugins>
			<plugin>
				<artifactId>maven-eclipse-plugin</artifactId>
				<version>2.9</version>
				<configuration>
					<additionalProjectnatures>
						<projectnature>org.springframework.ide.eclipse.core.springnature</projectnature>
					</additionalProjectnatures>
					<additionalBuildcommands>
						<buildcommand>org.springframework.ide.eclipse.core.springbuilder</buildcommand>
					</additionalBuildcommands>
					<downloadSources>true</downloadSources>
					<downloadJavadocs>true</downloadJavadocs>
				</configuration>
			</plugin>
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>1.7</source>
					<target>1.7</target>
					<compilerArgument>-Xlint:all</compilerArgument>
					<showWarnings>true</showWarnings>
					<showDeprecation>true</showDeprecation>
				</configuration>
			</plugin>

			<!-- This will copy all your dependencies to target/libs, which will be 
				picked up by the ant task below -->
			<!-- 
			<plugin>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<id>copy</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/libs</outputDirectory>
							<includeScope>compile</includeScope>
							<includeScope>runtime</includeScope>
							<excludeArtifactIds>javafx</excludeArtifactIds>
						</configuration>
					</execution>
				</executions>
			</plugin>
			 -->

			<plugin>
				<artifactId>maven-antrun-plugin</artifactId>
				<executions>
					<execution>
						<id>create-javafx-packages</id>
						<phase>package</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<target xmlns:fx="javafx:com.sun.javafx.tools.ant">
								<taskdef uri="javafx:com.sun.javafx.tools.ant" resource="com/sun/javafx/tools/ant/antlib.xml"
									classpath="${javafx.tools.ant.jar}" />
								<fx:application id="fxApp" name="${project.name}"
									mainClass="${exec.mainClass}" />
								<!-- Note: this will overwrite the JAR produced by maven-jar-plugin, 
									change destfile if you don't want this -->
								<!-- <fx:jar destfile="${project.build.directory}/${project.build.finalName}"> 
									<fx:application refid="fxApp"/> <fx:fileset dir="${project.build.directory}/classes"/> 
									<fx:resources> <fx:fileset dir="${project.build.directory}/libs" includes="*.jar"/> 
									</fx:resources> </fx:jar> <fx:deploy outdir="${project.build.directory}/javafx-output" 
									outfile="${project.build.finalName}" nativeBundles="all"> <fx:application 
									refid="fxApp"/> <fx:resources> -->
								<!-- If you changed <fx:jar> above, don't forget to modify the line 
									below -->
								<!-- <fx:fileset dir="${project.build.directory}" includes="${project.build.finalName}.jar"/> 
									<fx:fileset dir="${project.build.directory}" includes="libs/*.jar"/> </fx:resources> 
									</fx:deploy> -->
							</target>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- 
			<plugin>
				<artifactId>maven-jar-plugin</artifactId>
				<configuration>
					<archive>
						<manifest>
							<mainClass>${exec.mainClass}</mainClass>
							<addClasspath>false</addClasspath>
							<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
							<addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
						</manifest>
					</archive>
				</configuration>
			</plugin>
			 -->

			<!-- <plugin> <artifactId>maven-shade-plugin</artifactId> <executions> 
				<execution> <phase>package</phase> <goals> <goal>shade</goal> </goals> </execution> 
				</executions> <configuration> <transformers> <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer"> 
				<resource>META-INF/spring.handlers</resource> </transformer> <transformer 
				implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer"> 
				<resource>META-INF/spring.schemas</resource> </transformer> </transformers> 
				</configuration> </plugin> -->

			<!-- 
			<plugin>
				<artifactId>maven-assembly-plugin</artifactId>
				<executions>
					<execution>
						<id>make-assembly</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<archive>
						<manifest>
							<mainClass>${exec.mainClass}</mainClass>
						</manifest>
					</archive>
					<descriptorRefs>
						<descriptorRef>jar-with-dependencies</descriptorRef>
					</descriptorRefs>
				</configuration>
			</plugin>
			 -->
			 
			 <plugin>
			 	<groupId>com.zenjava</groupId>
			 	<artifactId>javafx-maven-plugin</artifactId>
			 	<configuration>
			 		<mainClass>${exec.mainClass}</mainClass>
			 	</configuration>
			 </plugin>

		</plugins>
	</build>

	<dependencies>

		<!-- JAVA FX -->
		<dependency>
			<groupId>com.oracle</groupId>
			<artifactId>javafx</artifactId>
			<version>2.2</version>
			<systemPath>${java.home}/lib/jfxrt.jar</systemPath>
			<scope>system</scope>
		</dependency>

		<!-- Testing -->

		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit.version}</version>
			<scope>test</scope>
		</dependency>

		<!-- SPRING -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-beans</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<!-- IBM WEBSPHERE-MQ -->
		<dependency>
			<groupId>com.ibm.mq.pcf</groupId>
			<artifactId>ms0b</artifactId>
			<version>6.1</version>
		</dependency>
		<!-- using MQ classes -->
		<dependency>
			<groupId>com.ibm</groupId>
			<artifactId>com.ibm.mq</artifactId>
			<version>${websphere-MQ.version}</version>
		</dependency>
		<dependency>
			<groupId>com.ibm.mq</groupId>
			<artifactId>connector</artifactId>
			<version>${websphere-MQ.version}</version>
		</dependency>
		<dependency>
			<groupId>com.ibm.mq</groupId>
			<artifactId>commonservices</artifactId>
			<version>${websphere-MQ.version}</version>
		</dependency>
		<dependency>
			<groupId>com.ibm</groupId>
			<artifactId>com.ibm.mq.jmqi</artifactId>
			<version>${websphere-MQ.version}</version>
		</dependency>
		<dependency>
			<groupId>com.ibm.mq</groupId>
			<artifactId>mq</artifactId>
			<version>${websphere-MQ.version}</version>
		</dependency>
		<dependency>
			<groupId>com.ibm.mq</groupId>
			<artifactId>com.ibm.mq.headers</artifactId>
			<version>${websphere-MQ.version}</version>
		</dependency>
		<dependency>
			<groupId>com.ibm.mq</groupId>
			<artifactId>com.ibm.mq.pcf</artifactId>
			<version>${websphere-MQ.version}</version>
		</dependency>
	</dependencies>

	<profiles>
		<profile>
			<id>JavaFX_classpath</id>
			<activation>
				<os>
					<family>windows</family>
				</os>
			</activation>
			<build>
				<plugins>
					<!-- 
					<plugin>
						<artifactId>maven-shade-plugin</artifactId>
						<configuration>
							<filters>
								<filter>
									<artifact>com.oracle:javafx</artifact>
									<includes>
										<include>**</include>
									</includes>
								</filter>
							</filters>
						</configuration>
					</plugin>
					 -->
				</plugins>
			</build>
		</profile>
	</profiles>
</project>